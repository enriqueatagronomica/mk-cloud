<!-- Required files and Information -->
<!-- Sample Code is my case is Located D:\Axis2Client folder-->
<!-- Repository which contains Modules/Services are Located D:\Axis2Client\Repository  folder-->
<!-- Axis2 Properties file is Located in D:\Axis2Client\axis2-client.xml  folder, This file includes path to "passwordCallbackClass"  and also defines UserName for authentication-->
<!-- File for authentaication is stored in Classpath with Name  D:\Axis2Client\src\props.xml -->
<!--Content in props.xml file -->
<!-- <properties version="1.0">
    <entry key="repositoryFolder">D:\\Axis2Client\\repository</entry>
    <entry key="axis2File">D:\\Axis2Client\\axis2-client.xml</entry>
    <entry key="password">welcome@3</entry>
    <entry key="username">developer1</entry>
</properties>    -->
<!-- Output folder and final jar is D:\Output\dist -->


<project basedir="d:\\Output" default="jar.client">
    <property name="baseDir" value="D:\\Output"/>
    <!--  Base Output folder -->
    <property name="dist.dir" value="dist"/>
    <!-- Final Destination of jar file -->
    <property name="build.classes" value="build/classes"/>
    <!-- Complied classes path -->
    <property name="src" value="src"/>
    <!-- Axis2 generated files path -->
    <property name="client.code.src" value="D:\Axis2Client\src"/>
    <!-- client Code, Main/Sample class path -->

    <property name="lib.dir" value="lib"/>
    <property name="axis2.lib.dir" value="D:\Axis2Client\lib"/>
    <!-- Axis2 Libraries, Includes Rampart and other required files -->

    <path id="axis2.classpath">
        <fileset dir="${axis2.lib.dir}">
            <include name="**/*.jar"/>
        </fileset>
    </path>

    <path id="axis2.client.classpath">    <!-- Reference to files generated by Axis2 codegen-->
        <fileset dir="${build.classes}">
            <include name="**/*.jar"/>
        </fileset>
    </path>

    <target name="clean">
        <delete includeemptydirs="true">   <!-- all file/dir in D:\Output folder -->
            <fileset dir="${baseDir}">
                <include name="build/**"></include>
                <include name="dist/**"></include>
                <include name="src/**"></include>
                <include name="reso**/**"></include>
                <include name="**.xml"></include>
            </fileset>
        </delete>

    </target>

    <target name="prepare" depends="clean">
        <mkdir dir="${build.classes}"/>
        <mkdir dir="${dist.dir}"/>
        <mkdir dir="${dist.dir}/${lib.dir}"/>

    </target>

    <!-- Generate Axis2 Stubs using WSDL file. Binding is XMLBeans -->
    <target name="codegen" depends="prepare">
        <java classname="org.apache.axis2.wsdl.WSDL2Java" fork="true">
            <classpath refid="axis2.classpath"/>
            <arg value="-d"/>
            <arg value="xmlbeans"/>
            <arg value="-uri"/>
            <arg value="https://webservice.exacttarget.com/etframework.wsdl"/>
            <arg value="-p"/>
            <!--  <arg value="com.et.client"/>-->
        </java>

        <!-- Move classes and schema folder to build folder-->
        <move todir="${build.classes}">
            <fileset dir="${basedir}/resources">
                <include name="**/*schema*/**/*.class"/>
                <include name="**/*schema*/**/*.xsb"/>
            </fileset>
        </move>
    </target>

    <!--Complie stub (XMLBeans) Code generated by Axis2 libraries-->
    <target name="compile.axis2.generated.src" depends="codegen">
        <javac debug="on" memoryMaximumSize="256m" memoryInitialSize="256m" fork="true" destdir="${build.classes}"
               srcdir="${src}" encoding="utf-8">
            <classpath refid="axis2.classpath"/>
        </javac>
        <copy toDir="${build.classes}" failonerror="false">
            <fileset dir="${src}">
                <include name="*.xml"/>
                <include name="*.properties"/>
            </fileset>
        </copy>
    </target>

    <!-- Compile Client Test files, This has to happen only after compiling Stubs classes -->
    <target name="compile.client.code" depends="compile.axis2.generated.src">
        <javac debug="on" memoryMaximumSize="256m" memoryInitialSize="256m" fork="true" destdir="${build.classes}"
               srcdir="${client.code.src}" encoding="utf-8">
            <classpath refid="axis2.client.classpath"/>
            <!-- Refer Stubs generated by Axis2 -->
            <classpath refid="axis2.classpath"/>
            <!-- Refer Axis2 libraris -->
        </javac>
        <copy toDir="${build.classes}" failonerror="false">     <!-- Copy compiled classes to Build/Classes folder -->
            <fileset dir="${client.code.src}">
                <include name="*.xml"/>
                <include name="*.properties"/>
            </fileset>
        </copy>
    </target>

    <!--Generate Jar file for Executing, Jar file will includes Classes folder and All Axis2 Libraries in Manifest file -->
    <target name="jar.client" depends="compile.client.code">
        <!--Copy all Axis2 jars to dist/Lib directory -->
        <copy toDir="${dist.dir}/lib" failonerror="false">
            <fileset dir="${axis2.lib.dir}">
                <include name="*.jar"/>
            </fileset>
        </copy>
        <!-- Generating Jar file from Libraries/classes and including jars file path in Manifest file -->
        <jar destfile="${dist.dir}/ETClient.jar">
            <fileset dir="${build.classes}"></fileset>
            <manifest>
                <attribute name="Class-Path"
                           value="./lib/XmlSchema-1.4.2.jar ./lib/axis2-jaxbri-1.4.1.jar ./lib/backport-util-concurrent-3.1.jar ./lib/jaxen-1.1.1.jar ./lib/woden-impl-dom-1.0M8.jar ./lib/activation-1.1.jar ./lib/axis2-jaxws-1.4.1.jar ./lib/commons-codec-1.3.jar ./lib/jettison-1.0-RC2.jar ./lib/wsdl4j-1.6.2.jar ./lib/annogen-0.1.0.jar ./lib/axis2-jaxws-api-1.4.1.jar ./lib/commons-fileupload-1.2.jar ./lib/jibx-bind-1.1.5.jar ./lib/wss4j-1.5.4.jar ./lib/axiom-api-1.2.7.jar ./lib/axis2-jibx-1.4.1.jar ./lib/commons-httpclient-3.1.jar ./lib/jibx-run-1.1.5.jar ./lib/wstx-asl-3.2.4.jar ./lib/axiom-dom-1.2.7.jar ./lib/axis2-json-1.4.1.jar ./lib/commons-io-1.4.jar ./lib/log4j-1.2.15.jar ./lib/xalan-2.7.0.jar ./lib/axiom-impl-1.2.7.jar ./lib/axis2-jws-api-1.4.1.jar ./lib/commons-logging-1.1.1.jar ./lib/mail-1.4.jar ./lib/xercesImpl-2.8.1.jar ./lib/axis2-adb-1.4.1.jar ./lib/axis2-kernel-1.4.1.jar ./lib/geronimo-annotation_1.0_spec-1.1.jar ./lib/mex-1.4.1.jar ./lib/xml-apis-1.3.04.jar ./lib/axis2-adb-codegen-1.4.1.jar ./lib/axis2-metadata-1.4.1.jar ./lib/geronimo-stax-api_1.0_spec-1.0.1.jar ./lib/neethi-2.0.4.jar ./lib/xml-resolver-1.2.jar ./lib/axis2-ant-plugin-1.4.1.jar ./lib/axis2-mtompolicy-1.4.1.jar ./lib/httpcore-4.0-beta1.jar ./lib/opensaml-1.1.jar ./lib/xmlbeans-2.3.0.jar ./lib/axis2-clustering-1.4.1.jar ./lib/axis2-saaj-1.4.1.jar
./lib/httpcore-nio-4.0-beta1.jar ./lib/rampart-core-1.4.jar ./lib/xmlsec-1.4.1.jar ./lib/axis2-codegen-1.4.1.jar ./lib/axis2-saaj-api-1.4.1.jar ./lib/jalopy-1.5rc3.jar  ./lib/rampart-policy-1.4.jar ./lib/axis2-corba-1.4.1.jar  ./lib/axis2-spring-1.4.1.jar  ./lib/jaxb-api-2.1.jar ./lib/rampart-trust-1.4.jar ./lib/axis2-fastinfoset-1.4.1.jar ./lib/axis2-transport-tcp-1.0.0.jar ./lib/jaxb-impl-2.1.6.jar ./lib/soapmonitor-1.4.1.jar ./lib/axis2-java2wsdl-1.4.1.jar ./lib/axis2-xmlbeans-1.4.1.jar ./lib/jaxb-xjc-2.1.6.jar ./lib/woden-api-1.0M8.jar"/>
                <attribute name="Main-Class" value="com.et.client.ETClient"/>
            </manifest>
        </jar>

        <delete dir="${build.classes}"/>
        <!-- Finally Delete classes folder -->
    </target>
</project>

        <!--Sample client Code in ETClient.java file -->
        <!--  public static void main(String args[])
        {
        org.apache.axis2.context.ConfigurationContext configurationContext = null;
        try
        {

            EndpointReference endPointReference = new EndpointReference("https://webservice.exacttarget.com/Service.asmx");
            configurationContext = ConfigurationContextFactory.createConfigurationContextFromFileSystem(PropertiesUtil.getInstance().getProperty("repositoryFolder"), PropertiesUtil.getInstance().getProperty("axis2File"));
            PartnerAPIStub stub = new PartnerAPIStub(configurationContext, "https://webservice.exacttarget.com/Service.asmx");
            ServiceClient serviceClient = stub._getServiceClient();
            Options options = new Options();
            options.setTo(endPointReference);
            serviceClient.setOptions(options);
            RetrieveRequestMsgDocument retrieveRequestMsgDocument = com.exacttarget.wsdl.partnerapi.RetrieveRequestMsgDocument.Factory.newInstance();
            RetrieveRequest rreq = com.exacttarget.wsdl.partnerapi.RetrieveRequest.Factory.newInstance();
            rreq.setObjectType("Email");
            String rreqProperties[] = {
                "ID" ,"Name","Subject","HTMLBody"
            };
            rreq.setPropertiesArray(rreqProperties);
            SimpleFilterPart sfp = com.exacttarget.wsdl.partnerapi.SimpleFilterPart.Factory.newInstance();
            sfp.setProperty("Name");
            sfp.setSimpleOperator(SimpleOperators.EQUALS);
            String sfpValues[] = {
                "Test"
            };
            sfp.setValueArray(sfpValues);
            rreq.setFilter(sfp);
            com.exacttarget.wsdl.partnerapi.RetrieveRequestMsgDocument.RetrieveRequestMsg retrieveRequestMsg = retrieveRequestMsgDocument.addNewRetrieveRequestMsg();
            retrieveRequestMsg.setRetrieveRequest(rreq);
            RetrieveResponseMsgDocument retrieveResponseMsgDocument = stub.retrieve(retrieveRequestMsgDocument);
            com.exacttarget.wsdl.partnerapi.RetrieveResponseMsgDocument.RetrieveResponseMsg retrieveResponseMsg = retrieveResponseMsgDocument.getRetrieveResponseMsg();
            System.out.println((new StringBuilder()).append("Response ::: ").append(retrieveResponseMsg.getOverallStatus()).toString());
            APIObject apiObject = retrieveResponseMsg.getResultsArray(0);
            Email email =(Email)apiObject;
            System.out.println("Subject ::: " + email.getHTMLBody());
            System.out.println((new StringBuilder()).append("Email  Id  ::: ").append(apiObject.getObjectID()).toString());
        }
        catch(RemoteException e)
        {
            e.printStackTrace();
        }
        catch(Exception e)
        {
            e.printStackTrace();
        }
    }
-->